// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataXClient is the client API for DataX service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataXClient interface {
	Initialize(ctx context.Context, in *Settings, opts ...grpc.CallOption) (*Initialization, error)
	Next(ctx context.Context, in *NextOptions, opts ...grpc.CallOption) (*NextMessage, error)
	Emit(ctx context.Context, in *EmitMessage, opts ...grpc.CallOption) (*EmitResult, error)
}

type dataXClient struct {
	cc grpc.ClientConnInterface
}

func NewDataXClient(cc grpc.ClientConnInterface) DataXClient {
	return &dataXClient{cc}
}

func (c *dataXClient) Initialize(ctx context.Context, in *Settings, opts ...grpc.CallOption) (*Initialization, error) {
	out := new(Initialization)
	err := c.cc.Invoke(ctx, "/datax.sdk.protocol.v1.DataX/Initialize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataXClient) Next(ctx context.Context, in *NextOptions, opts ...grpc.CallOption) (*NextMessage, error) {
	out := new(NextMessage)
	err := c.cc.Invoke(ctx, "/datax.sdk.protocol.v1.DataX/Next", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataXClient) Emit(ctx context.Context, in *EmitMessage, opts ...grpc.CallOption) (*EmitResult, error) {
	out := new(EmitResult)
	err := c.cc.Invoke(ctx, "/datax.sdk.protocol.v1.DataX/Emit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataXServer is the server API for DataX service.
// All implementations must embed UnimplementedDataXServer
// for forward compatibility
type DataXServer interface {
	Initialize(context.Context, *Settings) (*Initialization, error)
	Next(context.Context, *NextOptions) (*NextMessage, error)
	Emit(context.Context, *EmitMessage) (*EmitResult, error)
	mustEmbedUnimplementedDataXServer()
}

// UnimplementedDataXServer must be embedded to have forward compatible implementations.
type UnimplementedDataXServer struct {
}

func (UnimplementedDataXServer) Initialize(context.Context, *Settings) (*Initialization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initialize not implemented")
}
func (UnimplementedDataXServer) Next(context.Context, *NextOptions) (*NextMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Next not implemented")
}
func (UnimplementedDataXServer) Emit(context.Context, *EmitMessage) (*EmitResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Emit not implemented")
}
func (UnimplementedDataXServer) mustEmbedUnimplementedDataXServer() {}

// UnsafeDataXServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataXServer will
// result in compilation errors.
type UnsafeDataXServer interface {
	mustEmbedUnimplementedDataXServer()
}

func RegisterDataXServer(s grpc.ServiceRegistrar, srv DataXServer) {
	s.RegisterService(&DataX_ServiceDesc, srv)
}

func _DataX_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Settings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataXServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datax.sdk.protocol.v1.DataX/Initialize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataXServer).Initialize(ctx, req.(*Settings))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataX_Next_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataXServer).Next(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datax.sdk.protocol.v1.DataX/Next",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataXServer).Next(ctx, req.(*NextOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataX_Emit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmitMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataXServer).Emit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datax.sdk.protocol.v1.DataX/Emit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataXServer).Emit(ctx, req.(*EmitMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// DataX_ServiceDesc is the grpc.ServiceDesc for DataX service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataX_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "datax.sdk.protocol.v1.DataX",
	HandlerType: (*DataXServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Initialize",
			Handler:    _DataX_Initialize_Handler,
		},
		{
			MethodName: "Next",
			Handler:    _DataX_Next_Handler,
		},
		{
			MethodName: "Emit",
			Handler:    _DataX_Emit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/datax-sdk-protocol.proto",
}
